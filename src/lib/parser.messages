# Notes by MaÃ«l:
#
# Did new message appear when I updated parser.mly?
# =================================================
# To check if some new states should be present in parser.messages
# after an update of the grammar (parser.mly), I explained the way to do
# in HOWTODEBUG.md.
#
# How to write the error messages
# ===============================
# Do not use new lines for wrapping; use it only for semantic purposes.
#
# You can use the tokens $0, $1, $2... that will be replaced by the i-th last
# token that has been read. $0 will typically show the token that has been read
# right before an error occurred.
# Example:
# The dot is where we are stopped. Here, the parser didn't expect to read "end".
# NOTE: I modified the [element checkpoint i] to display the failing token in $0,
#       and the following tokens are accessible via $1, $2...
# Here is what the $i tokens contain:
#
#     begin formula atleast  (   1   , [a] . end  formula
#                               $3  $2  $1    $0
# NOTE: simple quotes ' ' will be added; dont write $1 but rather $1 directly.
#
# =========================================================================
touist_smt: ATLEAST VAR COMMA VAR WHEN
##
## Ends in an error in state: 467.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_smt -> ATLEAST expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr COMMA expr
##
touist_smt: ATMOST VAR COMMA VAR WHEN
##
## Ends in an error in state: 462.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_smt -> ATMOST expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr COMMA expr
##
touist_smt: EXACT VAR COMMA VAR WHEN
##
## Ends in an error in state: 445.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_smt -> EXACT expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr COMMA expr
##
touist_simple: ATLEAST VAR COMMA VAR WHEN
##
## Ends in an error in state: 153.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_simple -> ATLEAST expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr COMMA expr
##
touist_simple: ATMOST VAR COMMA VAR WHEN
##
## Ends in an error in state: 148.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_simple -> ATMOST expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr COMMA expr
##
touist_simple: EXACT VAR COMMA VAR WHEN
##
## Ends in an error in state: 130.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_simple -> EXACT expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr COMMA expr
##
touist_qbf: EXACT VAR COMMA VAR WHEN
##
## Ends in an error in state: 324.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_qbf -> EXACT expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr COMMA expr
##
touist_qbf: ATLEAST VAR COMMA VAR WHEN
##
## Ends in an error in state: 347.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_qbf -> ATLEAST expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr COMMA expr
##
touist_qbf: ATMOST VAR COMMA VAR WHEN
##
## Ends in an error in state: 342.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_qbf -> ATMOST expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr COMMA expr
##
touist_modalLogic: ATLEAST TERM COMMA TERM UNION_PR
##
## Ends in an error in state: 246.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_modalLogic -> ATLEAST expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr COMMA expr
##
touist_modalLogic: ATMOST TERM COMMA TERM UNION_PR
##
## Ends in an error in state: 241.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_modalLogic -> ATMOST expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr COMMA expr
##
touist_modalLogic: EXACT TERM COMMA TERM UNION_PR
##
## Ends in an error in state: 221.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_modalLogic -> EXACT expr COMMA expr . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr COMMA expr
##

Ill-formed $4. Either finish it with ')' or continue the expression beginning with:
    $1
Instead, the following statement were read:
    $0

touist_smt: ATLEAST VAR COMMA XOR
##
## Ends in an error in state: 466.
##
## formula_smt -> ATLEAST expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr COMMA
##
touist_smt: ATMOST VAR COMMA XOR
##
## Ends in an error in state: 461.
##
## formula_smt -> ATMOST expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr COMMA
##
touist_smt: EXACT VAR COMMA XOR
##
## Ends in an error in state: 444.
##
## formula_smt -> EXACT expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr COMMA
##
touist_simple: ATLEAST VAR COMMA XOR
##
## Ends in an error in state: 152.
##
## formula_simple -> ATLEAST expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr COMMA
##
touist_simple: ATMOST VAR COMMA XOR
##
## Ends in an error in state: 147.
##
## formula_simple -> ATMOST expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr COMMA
##
touist_simple: EXACT VAR COMMA XOR
##
## Ends in an error in state: 129.
##
## formula_simple -> EXACT expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr COMMA
##
touist_qbf: EXACT VAR COMMA XOR
##
## Ends in an error in state: 323.
##
## formula_qbf -> EXACT expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr COMMA
##
touist_qbf: ATMOST VAR COMMA XOR
##
## Ends in an error in state: 341.
##
## formula_qbf -> ATMOST expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr COMMA
##
touist_qbf: ATLEAST VAR COMMA XOR
##
## Ends in an error in state: 346.
##
## formula_qbf -> ATLEAST expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr COMMA
##
touist_modalLogic: ATLEAST TERM COMMA XOR
##
## Ends in an error in state: 245.
##
## formula_modalLogic -> ATLEAST expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr COMMA
##
touist_modalLogic: ATMOST TERM COMMA XOR
##
## Ends in an error in state: 240.
##
## formula_modalLogic -> ATMOST expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr COMMA
##
touist_modalLogic: EXACT TERM COMMA XOR
##
## Ends in an error in state: 220.
##
## formula_modalLogic -> EXACT expr COMMA . expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr COMMA
##

Ill-formed $3. An expression is expected after $1. Instead, the following statement were read:
    $0

touist_smt: ATLEAST XOR
##
## Ends in an error in state: 464.
##
## formula_smt -> ATLEAST . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST
##
touist_smt: ATMOST XOR
##
## Ends in an error in state: 459.
##
## formula_smt -> ATMOST . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST
##
touist_smt: EXACT XOR
##
## Ends in an error in state: 442.
##
## formula_smt -> EXACT . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT
##
touist_simple: ATLEAST XOR
##
## Ends in an error in state: 150.
##
## formula_simple -> ATLEAST . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST
##
touist_simple: ATMOST XOR
##
## Ends in an error in state: 145.
##
## formula_simple -> ATMOST . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST
##
touist_simple: EXACT XOR
##
## Ends in an error in state: 127.
##
## formula_simple -> EXACT . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT
##
touist_qbf: EXACT XOR
##
## Ends in an error in state: 321.
##
## formula_qbf -> EXACT . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT
##
touist_qbf: ATMOST XOR
##
## Ends in an error in state: 339.
##
## formula_qbf -> ATMOST . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST
##
touist_qbf: ATLEAST XOR
##
## Ends in an error in state: 344.
##
## formula_qbf -> ATLEAST . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST
##
touist_modalLogic: ATLEAST XOR
##
## Ends in an error in state: 243.
##
## formula_modalLogic -> ATLEAST . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST
##
touist_modalLogic: ATMOST XOR
##
## Ends in an error in state: 238.
##
## formula_modalLogic -> ATMOST . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST
##
touist_modalLogic: EXACT XOR
##
## Ends in an error in state: 218.
##
## formula_modalLogic -> EXACT . expr COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT
##

Ill-formed $3. At this point, an integer expression is expected. Instead, the following statement were read:
    $0

touist_smt: IF XOR
##
## Ends in an error in state: 439.
##
## formula_smt -> IF . expr THEN formula_smt ELSE formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF
##
touist_simple: IF XOR
##
## Ends in an error in state: 124.
##
## formula_simple -> IF . expr THEN formula_simple ELSE formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF
##
touist_simple: VARTUPLE IF XOR
##
## Ends in an error in state: 29.
##
## expr -> IF . expr THEN expr ELSE expr END [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## IF
##
touist_qbf: IF XOR
##
## Ends in an error in state: 300.
##
## formula_qbf -> IF . expr THEN formula_qbf ELSE formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF
##
touist_simple: BIGOR VAR IN VAR WHEN XOR
##
## Ends in an error in state: 111.
##
## option(when_cond) -> WHEN . expr [ RBRACK COLON ]
##
## The known suffix of the stack is as follows:
## WHEN
##
touist_modalLogic: IF XOR
##
## Ends in an error in state: 215.
##
## formula_modalLogic -> IF . expr THEN formula_modalLogic ELSE formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF
##

Ill-formed $3. At this point, a boolean expression is expected (not a formula!). Instead, the following statement were read:
    $0

touist_simple: VARTUPLE CARD XOR
##
## Ends in an error in state: 33.
##
## expr -> CARD . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## CARD
##
touist_simple: VARTUPLE EMPTY XOR
##
## Ends in an error in state: 31.
##
## expr -> EMPTY . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## EMPTY
##
touist_simple: VARTUPLE POWERSET XOR
##
## Ends in an error in state: 22.
##
## expr -> POWERSET . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## POWERSET
##

Ill-formed $3. A set expression is expected at this point. Instead, the following statement were read:
    $0

touist_qbf: VARTUPLE QUOTE XOR
##
## Ends in an error in state: 11.
##
## expr -> QUOTE . formula_simple QUOTE [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## QUOTE
##

After '"', a propositional formula is expected. Instead, read:
    $0

touist_qbf: VARTUPLE QUOTE VAR WHEN
##
## Ends in an error in state: 182.
##
## expr -> QUOTE formula_simple . QUOTE [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## formula_simple -> formula_simple . AND formula_simple [ XOR QUOTE OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR QUOTE OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR QUOTE OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR QUOTE OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR QUOTE OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR QUOTE OR NEWLINE IMPLIES EQUIV AND ]
##
## The known suffix of the stack is as follows:
## QUOTE formula_simple
##

At this point, either finish the quoted formula with '"' or continue the propositional formula with 'and', 'or', 'xor', '=>' or '<=>'.

touist_simple: VARTUPLE LBRACK XOR
##
## Ends in an error in state: 25.
##
## expr -> LBRACK . expr RANGE expr RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> LBRACK . RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> LBRACK . comma_list(expr) RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> LBRACK . expr FOR comma_list(var) IN comma_list(expr) option(when_cond) RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

Ill-formed set definition. At this point is expected one of the following:
- a comma-separated of floats, integers or proposition expressions;
- a float or integer expression followed by '..';
- an expression followed by 'for' (list comprehension).
Instead, the following statement were read:
    $0

touist_qbf: VARTUPLE LBRACK VAR FOR XOR
##
## Ends in an error in state: 104.
##
## expr -> LBRACK expr FOR . comma_list(var) IN comma_list(expr) option(when_cond) RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR
##

Ill-formed set definition. A list comprehension expects a list of variables after 'for'.

touist_qbf: VARTUPLE LBRACK VAR FOR VAR XOR
##
## Ends in an error in state: 105.
##
## expr -> LBRACK expr FOR comma_list(var) . IN comma_list(expr) option(when_cond) RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##

Ill-formed set definition. In a list comprehension, 'in' is expected after the list of variables.

touist_qbf: VARTUPLE LBRACK VAR FOR VAR IN XOR
##
## Ends in an error in state: 106.
##
## expr -> LBRACK expr FOR comma_list(var) IN . comma_list(expr) option(when_cond) RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR comma_list(var) IN
##

Ill-formed set definition. In a list comprehension, a comma-separated list of sets is expected after 'in'.

touist_qbf: VARTUPLE LBRACK VAR FOR VAR IN VAR VARTUPLE
##
## Ends in an error in state: 110.
##
## expr -> LBRACK expr FOR comma_list(var) IN comma_list(expr) . option(when_cond) RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##

Ill-formed set definition (list comprehension). Either finish the list of sets with ']' or continue with a conditionnal statement 'when'.

touist_qbf: VARTUPLE LBRACK VAR FOR VAR IN VAR WHEN VAR COLON
##
## Ends in an error in state: 113.
##
## expr -> LBRACK expr FOR comma_list(var) IN comma_list(expr) option(when_cond) . RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##

Ill-formed set definition (list comprehension). At this point, ']' is expected.

touist_simple: VARTUPLE TOFLOAT XOR
##
## Ends in an error in state: 6.
##
## expr -> TOFLOAT . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## TOFLOAT
##
touist_simple: VARTUPLE TOINT XOR
##
## Ends in an error in state: 5.
##
## expr -> TOINT . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## TOINT
##
touist_simple: VARTUPLE SQRT XOR
##
## Ends in an error in state: 10.
##
## expr -> SQRT . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## SQRT
##
touist_simple: VARTUPLE ABS XOR
##
## Ends in an error in state: 35.
##
## expr -> ABS . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## ABS
##
touist_simple: VARTUPLE SUB XOR
##
## Ends in an error in state: 9.
##
## expr -> SUB . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB
##

Ill-formed $1. At this point is expected an int or float expression. Instead, the following statement were read:
    $0

touist_simple: VARTUPLE LPAREN VAR WHEN
##
## Ends in an error in state: 117.
##
## expr -> LPAREN expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

Ill-formed $1. At this point, either finish the expression with ')' or continue it with an operator (>,<,!=,==,and,or...). Instead, the following statement were read:
    $0

touist_smt: SUB LPAREN VAR XOR
##
## Ends in an error in state: 408.
##
## expr_smt -> expr_smt . LT expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . LE expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . GT expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . GE expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ SUB RPAREN NOTEQUAL MUL LT LE GT GE EQUAL DIV ADD ]
## expr_smt -> LPAREN expr_smt . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN expr_smt
##

Ill-formed $1. At this point, either finish the SMT expression with ')' or continue it with an operator (>,<,>=,<=,!=,==,+,-,/,*). Instead, the following statement were read:
    $0

touist_simple: VARTUPLE LPAREN XOR
##
## Ends in an error in state: 24.
##
## expr -> LPAREN . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed $1. At this point is expected an expression. Instead, the following statement were read:
    $0

touist_smt: SUB LPAREN XOR
##
## Ends in an error in state: 402.
##
## expr_smt -> LPAREN . expr_smt RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed $1. At this point is expected an SMT expression. Instead, the following statement were read:
    $0

touist_qbf: LPAREN XOR
##
## Ends in an error in state: 294.
##
## formula_qbf -> LPAREN . formula_qbf RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Ill-formed $1. At this point is expected a QBF expression. Instead, the following statement were read:
    $0

touist_simple: VARTUPLE DIFF_PR XOR
##
## Ends in an error in state: 32.
##
## expr -> DIFF_PR . expr COMMA expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## DIFF_PR
##
touist_simple: VARTUPLE INTER_PR XOR
##
## Ends in an error in state: 27.
##
## expr -> INTER_PR . expr COMMA expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## INTER_PR
##
touist_simple: VARTUPLE SUBSET_PR XOR
##
## Ends in an error in state: 8.
##
## expr -> SUBSET_PR . expr COMMA expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## SUBSET_PR
##
touist_simple: VARTUPLE UNION_PR XOR
##
## Ends in an error in state: 3.
##
## expr -> UNION_PR . expr COMMA expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## UNION_PR
##

Ill-formed $3. A set expression is expected at this point. Instead, read $0.

touist_qbf: VARTUPLE NOT VAR UNION_PR
##
## Ends in an error in state: 119.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> NOT expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT expr
##
touist_qbf: VARTUPLE SUB VAR UNION_PR
##
## Ends in an error in state: 186.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> SUB expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB expr
##

Ill-formed $2. At this point, a continuation of the expression is expected. Instead, read $0.

touist_simple: VARTUPLE NOT XOR
##
## Ends in an error in state: 23.
##
## expr -> NOT . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT
##

Ill-formed $1. At this point is expected a boolean expression. Instead, read $0.

touist_smt: BIGAND XOR
##
## Ends in an error in state: 453.
##
## formula_smt -> BIGAND . comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND
##
touist_smt: BIGOR XOR
##
## Ends in an error in state: 447.
##
## formula_smt -> BIGOR . comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR
##
touist_simple: BIGAND XOR
##
## Ends in an error in state: 139.
##
## formula_simple -> BIGAND . comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND
##
touist_simple: BIGOR XOR
##
## Ends in an error in state: 133.
##
## formula_simple -> BIGOR . comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR
##
touist_qbf: BIGOR XOR
##
## Ends in an error in state: 327.
##
## formula_qbf -> BIGOR . comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR
##
touist_qbf: BIGAND XOR
##
## Ends in an error in state: 333.
##
## formula_qbf -> BIGAND . comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND
##
touist_modalLogic: BIGOR XOR
##
## Ends in an error in state: 226.
##
## formula_modalLogic -> BIGOR . comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR
##
touist_modalLogic: BIGAND XOR
##
## Ends in an error in state: 232.
##
## formula_modalLogic -> BIGAND . comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND
##

Ill-formed $1. At this point is expected a comma-separated list of variables, i.e., '$i,$j'. Instead, the following statement were read:
    $0

touist_smt: LPAREN XOR
##
## Ends in an error in state: 433.
##
## expr_smt -> LPAREN . expr_smt RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## formula_smt -> LPAREN . formula_smt RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##
touist_simple: LPAREN XOR
##
## Ends in an error in state: 15.
##
## formula_simple -> LPAREN . formula_simple RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##
touist_smt: NOT XOR
##
## Ends in an error in state: 431.
##
## formula_smt -> NOT . formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NOT
##
touist_simple: NOT XOR
##
## Ends in an error in state: 13.
##
## formula_simple -> NOT . formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NOT
##
touist_qbf: NOT XOR
##
## Ends in an error in state: 292.
##
## formula_qbf -> NOT . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NOT
##
touist_modalLogic: NOT XOR
##
## Ends in an error in state: 207.
##
## formula_modalLogic -> NOT . formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

Ill-formed $1. At this point, a formula is expected. Instead, the following statement were read:
    $0

touist_simple: VARTUPLE XOR
##
## Ends in an error in state: 1.
##
## var -> VARTUPLE . comma_list(indices) RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE QUOTE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND DATA COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND AFFECT ADD ]
##
## The known suffix of the stack is as follows:
## VARTUPLE
##

Ill-formed variable-tuple. At this point, a comma-separated list of expressions (which we call 'indices' of the variable-tuple). Instead, the following statement were read:
    $0

touist_simple: VAR WHEN
##
## Ends in an error in state: 389.
##
## affect_or(formula_simple) -> var . AFFECT expr [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## formula_simple -> var . [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## var
##
touist_smt: VAR WHEN
##
## Ends in an error in state: 496.
##
## affect_or(formula_smt) -> var . AFFECT expr [ VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## expr_smt -> var . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## var
##
touist_qbf: VAR WHEN
##
## Ends in an error in state: 378.
##
## affect_or(formula_qbf) -> var . AFFECT expr [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## formula_qbf -> var . [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## var
##
touist_modalLogic: VAR WHEN
##
## Ends in an error in state: 279.
##
## affect_or(formula_modalLogic) -> var . AFFECT expr [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## formula_modalLogic -> var . [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## var
##

Either the variable $1 was meant to be part of a formula, in which case the formula must end (I dont know exactly why when I wrote this error). Or you wanted to affect $1, in which case '=' is expected. Instead, the following statement were read:
    $0

touist_simple: VAR AFFECT XOR
##
## Ends in an error in state: 390.
##
## affect_or(formula_simple) -> var AFFECT . expr [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
##
## The known suffix of the stack is as follows:
## var AFFECT
##
touist_smt: VAR AFFECT XOR
##
## Ends in an error in state: 497.
##
## affect_or(formula_smt) -> var AFFECT . expr [ VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
##
## The known suffix of the stack is as follows:
## var AFFECT
##
touist_qbf: VAR AFFECT XOR
##
## Ends in an error in state: 379.
##
## affect_or(formula_qbf) -> var AFFECT . expr [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
##
## The known suffix of the stack is as follows:
## var AFFECT
##
touist_modalLogic: VAR AFFECT XOR
##
## Ends in an error in state: 280.
##
## affect_or(formula_modalLogic) -> var AFFECT . expr [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
##
## The known suffix of the stack is as follows:
## var AFFECT
##

Ill-formed global variable affectation. At this point, an expression is expected. Instead, the following statement were read:
    $0

touist_simple: VAR AFFECT VAR WHEN
##
## Ends in an error in state: 391.
##
## affect_or(formula_simple) -> var AFFECT expr . [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## expr -> expr . ADD expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## var AFFECT expr
##
touist_smt: VAR AFFECT VAR WHEN
##
## Ends in an error in state: 498.
##
## affect_or(formula_smt) -> var AFFECT expr . [ VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## expr -> expr . ADD expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## var AFFECT expr
##
touist_qbf: VAR AFFECT VAR WHEN
##
## Ends in an error in state: 380.
##
## affect_or(formula_qbf) -> var AFFECT expr . [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## expr -> expr . ADD expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE FORALL EXISTS EXACT EQUIV EQUAL EOF DIV DIFF BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## var AFFECT expr
##
touist_modalLogic: VAR AFFECT TERM UNION_PR
##
## Ends in an error in state: 281.
##
## affect_or(formula_modalLogic) -> var AFFECT expr . [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## expr -> expr . ADD expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR VARTUPLE VAR UNION TUPLE TOP TERM SUBSET SUB OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER IN IMPLIES IF GT GE EXACT EQUIV EQUAL EOF DIV DIFF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## var AFFECT expr
##

Ill-formed global variable affectation. At this point, either continue the expression with an operator (+,-,>=,!=,==,and,or...) or begin a new formula.

touist_simple: TUPLE XOR
##
## Ends in an error in state: 4.
##
## prop -> TUPLE . comma_list(indices) RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE QUOTE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND DATA COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## TUPLE
##

Ill-formed term-tuple. At this point, a comma-separated list of expressions (which we call 'indices' of the variable-tuple) is expected. Instead, the following statement were read:
    $0

touist_smt: BIGAND VAR IN VAR COLON TOP TUPLE
##
## Ends in an error in state: 470.
##
## formula_smt -> formula_smt . AND formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_smt . END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_smt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 473, spurious reduction of production formula_smt -> expr_smt
##
touist_smt: BIGOR VAR IN VAR COLON TOP TUPLE
##
## Ends in an error in state: 484.
##
## formula_smt -> formula_smt . AND formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_smt . END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_smt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 473, spurious reduction of production formula_smt -> expr_smt
##
touist_simple: BIGAND VAR IN VAR COLON TOP WHEN
##
## Ends in an error in state: 158.
##
## formula_simple -> formula_simple . AND formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_simple . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_simple
##
touist_simple: BIGOR VAR IN VAR COLON TOP WHEN
##
## Ends in an error in state: 171.
##
## formula_simple -> formula_simple . AND formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_simple . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_simple
##
touist_qbf: BIGOR VAR IN VAR COLON VAR WHEN
##
## Ends in an error in state: 365.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_qbf . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_qbf
##
touist_qbf: BIGAND VAR IN VAR COLON VAR WHEN
##
## Ends in an error in state: 352.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_qbf . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_qbf
##
touist_modalLogic: BIGOR VAR IN TERM COLON TERM WHEN
##
## Ends in an error in state: 264.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_modalLogic . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_modalLogic
##
touist_modalLogic: BIGAND VAR IN TERM COLON TERM WHEN
##
## Ends in an error in state: 251.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_modalLogic . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON formula_modalLogic
##

Ill-formed $7. At this point, either finish by 'end' the formula or continue the formula with one of and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_smt: BIGAND VAR IN VAR COLON XOR
##
## Ends in an error in state: 458.
##
## formula_smt -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON . formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON
##
touist_smt: BIGOR VAR IN VAR COLON XOR
##
## Ends in an error in state: 452.
##
## formula_smt -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON . formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON
##
touist_simple: BIGAND VAR IN VAR COLON XOR
##
## Ends in an error in state: 144.
##
## formula_simple -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON . formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON
##
touist_simple: BIGOR VAR IN VAR COLON XOR
##
## Ends in an error in state: 138.
##
## formula_simple -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON . formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON
##
touist_qbf: BIGOR VAR IN VAR COLON XOR
##
## Ends in an error in state: 332.
##
## formula_qbf -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON . formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON
##
touist_qbf: BIGAND VAR IN VAR COLON XOR
##
## Ends in an error in state: 338.
##
## formula_qbf -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON . formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON
##
touist_modalLogic: BIGAND VAR IN TERM COLON XOR
##
## Ends in an error in state: 237.
##
## formula_modalLogic -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON . formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond) COLON
##
touist_modalLogic: BIGOR VAR IN TERM COLON XOR
##
## Ends in an error in state: 231.
##
## formula_modalLogic -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON . formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond) COLON
##

Ill-formed $6. After $1, a formula is expected. Instead, the following statement were read:
    $0

touist_simple: BIGOR VAR IN VAR WHEN BOOL RBRACK
##
## Ends in an error in state: 137.
##
## formula_simple -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) . COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##
touist_simple: BIGAND VAR IN VAR WHEN BOOL RBRACK
##
## Ends in an error in state: 143.
##
## formula_simple -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) . COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##
touist_smt: BIGOR VAR IN VAR WHEN BOOL RBRACK
##
## Ends in an error in state: 451.
##
## formula_smt -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) . COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##
touist_smt: BIGAND VAR IN VAR WHEN BOOL RBRACK
##
## Ends in an error in state: 457.
##
## formula_smt -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) . COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##
touist_qbf: BIGOR VAR IN VAR WHEN BOOL RBRACK
##
## Ends in an error in state: 331.
##
## formula_qbf -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) . COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##
touist_qbf: BIGAND VAR IN VAR WHEN BOOL RBRACK
##
## Ends in an error in state: 337.
##
## formula_qbf -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) . COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##
touist_modalLogic: BIGOR VAR IN TERM WHEN TERM RBRACK
##
## Ends in an error in state: 230.
##
## formula_modalLogic -> BIGOR comma_list(var) IN comma_list(expr) option(when_cond) . COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##
touist_modalLogic: BIGAND VAR IN TERM WHEN TERM RBRACK
##
## Ends in an error in state: 236.
##
## formula_modalLogic -> BIGAND comma_list(var) IN comma_list(expr) option(when_cond) . COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr) option(when_cond)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 112, spurious reduction of production option(when_cond) -> WHEN expr
##

Ill-formed $5. At this point, ':' is expected. Instead, the following statement were read:
    $0

touist_smt: BIGAND VAR IN VAR VARTUPLE
##
## Ends in an error in state: 456.
##
## formula_smt -> BIGAND comma_list(var) IN comma_list(expr) . option(when_cond) COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_smt: BIGOR VAR IN VAR VARTUPLE
##
## Ends in an error in state: 450.
##
## formula_smt -> BIGOR comma_list(var) IN comma_list(expr) . option(when_cond) COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_simple: BIGAND VAR IN VAR VARTUPLE
##
## Ends in an error in state: 142.
##
## formula_simple -> BIGAND comma_list(var) IN comma_list(expr) . option(when_cond) COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_simple: BIGOR VAR IN VAR VARTUPLE
##
## Ends in an error in state: 136.
##
## formula_simple -> BIGOR comma_list(var) IN comma_list(expr) . option(when_cond) COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_qbf: BIGOR VAR IN VAR VARTUPLE
##
## Ends in an error in state: 330.
##
## formula_qbf -> BIGOR comma_list(var) IN comma_list(expr) . option(when_cond) COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_qbf: BIGAND VAR IN VAR VARTUPLE
##
## Ends in an error in state: 336.
##
## formula_qbf -> BIGAND comma_list(var) IN comma_list(expr) . option(when_cond) COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_modalLogic: BIGOR VAR IN TERM UNION_PR
##
## Ends in an error in state: 229.
##
## formula_modalLogic -> BIGOR comma_list(var) IN comma_list(expr) . option(when_cond) COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_modalLogic: BIGAND VAR IN TERM UNION_PR
##
## Ends in an error in state: 235.
##
## formula_modalLogic -> BIGAND comma_list(var) IN comma_list(expr) . option(when_cond) COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##

Ill-formed $4. At this point, either continue the set expression list with ',' or finish it with 'when' or ':'. Instead, the following statement were read:
    $0

touist_smt: BIGAND VAR IN XOR
##
## Ends in an error in state: 455.
##
## formula_smt -> BIGAND comma_list(var) IN . comma_list(expr) option(when_cond) COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN
##
touist_smt: BIGOR VAR IN XOR
##
## Ends in an error in state: 449.
##
## formula_smt -> BIGOR comma_list(var) IN . comma_list(expr) option(when_cond) COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN
##
touist_simple: BIGAND VAR IN XOR
##
## Ends in an error in state: 141.
##
## formula_simple -> BIGAND comma_list(var) IN . comma_list(expr) option(when_cond) COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN
##
touist_simple: BIGOR VAR IN XOR
##
## Ends in an error in state: 135.
##
## formula_simple -> BIGOR comma_list(var) IN . comma_list(expr) option(when_cond) COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN
##
touist_qbf: BIGOR VAR IN XOR
##
## Ends in an error in state: 329.
##
## formula_qbf -> BIGOR comma_list(var) IN . comma_list(expr) option(when_cond) COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN
##
touist_qbf: BIGAND VAR IN XOR
##
## Ends in an error in state: 335.
##
## formula_qbf -> BIGAND comma_list(var) IN . comma_list(expr) option(when_cond) COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN
##
touist_modalLogic: BIGOR VAR IN XOR
##
## Ends in an error in state: 228.
##
## formula_modalLogic -> BIGOR comma_list(var) IN . comma_list(expr) option(when_cond) COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var) IN
##
touist_modalLogic: BIGAND VAR IN XOR
##
## Ends in an error in state: 234.
##
## formula_modalLogic -> BIGAND comma_list(var) IN . comma_list(expr) option(when_cond) COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var) IN
##

Ill-formed $3 operator. After $1, a comma-separated list of set expressions is expected. Instead, the following statement were read:
    $0

touist_smt: BIGAND VAR XOR
##
## Ends in an error in state: 454.
##
## formula_smt -> BIGAND comma_list(var) . IN comma_list(expr) option(when_cond) COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_smt: BIGOR VAR XOR
##
## Ends in an error in state: 448.
##
## formula_smt -> BIGOR comma_list(var) . IN comma_list(expr) option(when_cond) COLON formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_simple: BIGAND VAR XOR
##
## Ends in an error in state: 140.
##
## formula_simple -> BIGAND comma_list(var) . IN comma_list(expr) option(when_cond) COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_simple: BIGOR VAR XOR
##
## Ends in an error in state: 134.
##
## formula_simple -> BIGOR comma_list(var) . IN comma_list(expr) option(when_cond) COLON formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_qbf: BIGOR VAR XOR
##
## Ends in an error in state: 328.
##
## formula_qbf -> BIGOR comma_list(var) . IN comma_list(expr) option(when_cond) COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_qbf: BIGAND VAR XOR
##
## Ends in an error in state: 334.
##
## formula_qbf -> BIGAND comma_list(var) . IN comma_list(expr) option(when_cond) COLON formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_modalLogic: BIGOR VAR XOR
##
## Ends in an error in state: 227.
##
## formula_modalLogic -> BIGOR comma_list(var) . IN comma_list(expr) option(when_cond) COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGOR comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_modalLogic: BIGAND VAR XOR
##
## Ends in an error in state: 233.
##
## formula_modalLogic -> BIGAND comma_list(var) . IN comma_list(expr) option(when_cond) COLON formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BIGAND comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##

Ill-formed $2. At this point, either continue the list or variables with ',' or finish it with 'in'. Instead, the following statement were read:
    $0

touist_smt: IF VAR THEN TOP ELSE TOP TUPLE
##
## Ends in an error in state: 488.
##
## formula_smt -> IF expr THEN formula_smt ELSE formula_smt . END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . AND formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_smt ELSE formula_smt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 473, spurious reduction of production formula_smt -> expr_smt
##
touist_simple: IF VAR THEN TOP ELSE TOP WHEN
##
## Ends in an error in state: 175.
##
## formula_simple -> IF expr THEN formula_simple ELSE formula_simple . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . AND formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_simple ELSE formula_simple
##
touist_qbf: IF VAR THEN VAR ELSE VAR WHEN
##
## Ends in an error in state: 371.
##
## formula_qbf -> IF expr THEN formula_qbf ELSE formula_qbf . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_qbf ELSE formula_qbf
##
touist_modalLogic: IF TERM THEN TERM ELSE TERM WHEN
##
## Ends in an error in state: 272.
##
## formula_modalLogic -> IF expr THEN formula_modalLogic ELSE formula_modalLogic . END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV END AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_modalLogic ELSE formula_modalLogic
##

Ill-formed 'if' statement. At this point, either finish the formula with 'end' or continue it with one of and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_smt: IF VAR THEN TOP ELSE XOR
##
## Ends in an error in state: 487.
##
## formula_smt -> IF expr THEN formula_smt ELSE . formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_smt ELSE
##
touist_simple: IF VAR THEN TOP ELSE XOR
##
## Ends in an error in state: 174.
##
## formula_simple -> IF expr THEN formula_simple ELSE . formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_simple ELSE
##
touist_qbf: IF VAR THEN VAR ELSE XOR
##
## Ends in an error in state: 370.
##
## formula_qbf -> IF expr THEN formula_qbf ELSE . formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_qbf ELSE
##
touist_modalLogic: IF TERM THEN TERM ELSE XOR
##
## Ends in an error in state: 271.
##
## formula_modalLogic -> IF expr THEN formula_modalLogic ELSE . formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_modalLogic ELSE
##

Ill-formed 'if' statement. After $1, a formula is expected. Instead, the following statement were read:
    $0

touist_smt: IF VAR THEN TOP TUPLE
##
## Ends in an error in state: 486.
##
## formula_smt -> IF expr THEN formula_smt . ELSE formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . AND formula_smt [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_smt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 473, spurious reduction of production formula_smt -> expr_smt
##
touist_simple: IF VAR THEN TOP WHEN
##
## Ends in an error in state: 173.
##
## formula_simple -> IF expr THEN formula_simple . ELSE formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . AND formula_simple [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_simple
##
touist_qbf: IF VAR THEN VAR WHEN
##
## Ends in an error in state: 369.
##
## formula_qbf -> IF expr THEN formula_qbf . ELSE formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_qbf
##
touist_modalLogic: IF TERM THEN TERM WHEN
##
## Ends in an error in state: 270.
##
## formula_modalLogic -> IF expr THEN formula_modalLogic . ELSE formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR OR NEWLINE IMPLIES EQUIV ELSE AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN formula_modalLogic
##

Ill-formed 'if' statement. At this point, either finish the formula with 'else' or continue it with one of and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_simple: VARTUPLE IF VAR THEN VAR ELSE VAR WHEN
##
## Ends in an error in state: 94.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> IF expr THEN expr ELSE expr . END [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL END DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

Ill-formed 'if' statement. At this point, either finish the expression with 'end' or continue it with an operator (<,>,!=,==,and,or...). Instead, the following statement were read:
    $0

touist_simple: VARTUPLE IF VAR THEN VAR ELSE XOR
##
## Ends in an error in state: 93.
##
## expr -> IF expr THEN expr ELSE . expr END [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

Ill-formed 'if' statement. At this point, an expression is expected. Instead, the following statement were read:
    $0

touist_simple: VARTUPLE IF VAR THEN VAR WHEN
##
## Ends in an error in state: 92.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> IF expr THEN expr . ELSE expr END [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL ELSE DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

Ill-formed 'if' statement. At this point, either finish the expression with 'else' or continue it with an operator (<,>,!=,==,and,or...). Instead, the following statement were read:
    $0

touist_smt: IF VAR THEN XOR
##
## Ends in an error in state: 441.
##
## formula_smt -> IF expr THEN . formula_smt ELSE formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##
touist_simple: IF VAR THEN XOR
##
## Ends in an error in state: 126.
##
## formula_simple -> IF expr THEN . formula_simple ELSE formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##
touist_qbf: IF VAR THEN XOR
##
## Ends in an error in state: 302.
##
## formula_qbf -> IF expr THEN . formula_qbf ELSE formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##
touist_modalLogic: IF TERM THEN XOR
##
## Ends in an error in state: 217.
##
## formula_modalLogic -> IF expr THEN . formula_modalLogic ELSE formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

Ill-formed 'if' statement. At this point, either finish the formula with 'else' or continue it with one of and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_simple: VARTUPLE IF VAR THEN XOR
##
## Ends in an error in state: 91.
##
## expr -> IF expr THEN . expr ELSE expr END [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

Ill-formed 'if' statement. At this point, an expression is expected. Instead, the following statement were read:
    $0

touist_simple: VARTUPLE IF VAR WHEN
##
## Ends in an error in state: 90.
##
## expr -> expr . ADD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> IF expr . THEN expr ELSE expr END [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr
##
touist_simple: IF VAR WHEN
##
## Ends in an error in state: 125.
##
## expr -> expr . ADD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_simple -> IF expr . THEN formula_simple ELSE formula_simple END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr
##
touist_qbf: IF VAR WHEN
##
## Ends in an error in state: 301.
##
## expr -> expr . ADD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_qbf -> IF expr . THEN formula_qbf ELSE formula_qbf END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr
##
touist_modalLogic: IF TERM UNION_PR
##
## Ends in an error in state: 216.
##
## expr -> expr . ADD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_modalLogic -> IF expr . THEN formula_modalLogic ELSE formula_modalLogic END [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr
##

Ill-formed 'if' statement. At this point, either finish the expression with 'then' or continue it with an operator (<,>,!=,==,and,or...). Instead, the following statement were read:
    $0

touist_smt: LET VAR AFFECT VAR COLON LPAREN BOTTOM RPAREN WHEN
##
## Ends in an error in state: 473.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## formula_smt -> expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## expr_smt
##

At this point, either finish the formula with a new formula or continue it with one of and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_simple: LET VAR AFFECT VAR COLON TOP WHEN
##
## Ends in an error in state: 177.
##
## formula_simple -> formula_simple . AND formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## let_affect(expr,formula_simple) -> LET comma_list(var) AFFECT comma_list(expr) COLON formula_simple . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr) COLON formula_simple
##
touist_smt: LET VAR AFFECT VAR COLON LPAREN NOT BOTTOM RPAREN WHEN
##
## Ends in an error in state: 490.
##
## formula_smt -> formula_smt . AND formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## let_affect(expr,formula_smt) -> LET comma_list(var) AFFECT comma_list(expr) COLON formula_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr) COLON formula_smt
##
touist_qbf: LET VAR AFFECT VAR COLON VAR WHEN
##
## Ends in an error in state: 373.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## let_affect(expr,formula_qbf) -> LET comma_list(var) AFFECT comma_list(expr) COLON formula_qbf . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr) COLON formula_qbf
##
touist_modalLogic: LET VAR AFFECT TERM COLON TERM WHEN
##
## Ends in an error in state: 274.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## let_affect(expr,formula_modalLogic) -> LET comma_list(var) AFFECT comma_list(expr) COLON formula_modalLogic . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr) COLON formula_modalLogic
##

Ill-formed local variable block. At this point, either finish the formula by starting a new one or continue it with and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_smt: LET VAR AFFECT VAR COLON XOR
##
## Ends in an error in state: 438.
##
## let_affect(expr,formula_smt) -> LET comma_list(var) AFFECT comma_list(expr) COLON . formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr) COLON
##
touist_simple: LET VAR AFFECT VAR COLON XOR
##
## Ends in an error in state: 123.
##
## let_affect(expr,formula_simple) -> LET comma_list(var) AFFECT comma_list(expr) COLON . formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr) COLON
##
touist_qbf: LET VAR AFFECT VAR COLON XOR
##
## Ends in an error in state: 299.
##
## let_affect(expr,formula_qbf) -> LET comma_list(var) AFFECT comma_list(expr) COLON . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr) COLON
##
touist_modalLogic: LET VAR AFFECT TERM COLON XOR
##
## Ends in an error in state: 214.
##
## let_affect(expr,formula_modalLogic) -> LET comma_list(var) AFFECT comma_list(expr) COLON . formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr) COLON
##

Ill-formed local variable declaration. After $1, a formula is expected. Instead, the following statement were read:
    $0

touist_smt: LET VAR AFFECT VAR WHEN
##
## Ends in an error in state: 437.
##
## let_affect(expr,formula_smt) -> LET comma_list(var) AFFECT comma_list(expr) . COLON formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_simple: LET VAR AFFECT VAR WHEN
##
## Ends in an error in state: 122.
##
## let_affect(expr,formula_simple) -> LET comma_list(var) AFFECT comma_list(expr) . COLON formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_qbf: LET VAR AFFECT VAR WHEN
##
## Ends in an error in state: 298.
##
## let_affect(expr,formula_qbf) -> LET comma_list(var) AFFECT comma_list(expr) . COLON formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##
touist_modalLogic: LET VAR AFFECT TERM UNION_PR
##
## Ends in an error in state: 213.
##
## let_affect(expr,formula_modalLogic) -> LET comma_list(var) AFFECT comma_list(expr) . COLON formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comma_list(expr) -> expr
##

Ill-formed local variable declaration. At this point, either finish the expression with ':' or continue it with an operator (>,<,!=,==,and,or...). Instead, the following statement were read:
    $0

touist_smt: LET VAR AFFECT XOR
##
## Ends in an error in state: 436.
##
## let_affect(expr,formula_smt) -> LET comma_list(var) AFFECT . comma_list(expr) COLON formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT
##
touist_simple: LET VAR AFFECT XOR
##
## Ends in an error in state: 21.
##
## let_affect(expr,formula_simple) -> LET comma_list(var) AFFECT . comma_list(expr) COLON formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT
##
touist_qbf: LET VAR AFFECT XOR
##
## Ends in an error in state: 297.
##
## let_affect(expr,formula_qbf) -> LET comma_list(var) AFFECT . comma_list(expr) COLON formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT
##
touist_modalLogic: LET VAR AFFECT XOR
##
## Ends in an error in state: 212.
##
## let_affect(expr,formula_modalLogic) -> LET comma_list(var) AFFECT . comma_list(expr) COLON formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var) AFFECT
##

Ill-formed local variable declaration. At this point, an expression is expected. Instead, the following statement were read:
    $0

touist_smt: LET VAR XOR
##
## Ends in an error in state: 435.
##
## let_affect(expr,formula_smt) -> LET comma_list(var) . AFFECT comma_list(expr) COLON formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_simple: LET VAR XOR
##
## Ends in an error in state: 20.
##
## let_affect(expr,formula_simple) -> LET comma_list(var) . AFFECT comma_list(expr) COLON formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_qbf: LET VAR XOR
##
## Ends in an error in state: 296.
##
## let_affect(expr,formula_qbf) -> LET comma_list(var) . AFFECT comma_list(expr) COLON formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##
touist_modalLogic: LET VAR XOR
##
## Ends in an error in state: 211.
##
## let_affect(expr,formula_modalLogic) -> LET comma_list(var) . AFFECT comma_list(expr) COLON formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET comma_list(var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production comma_list(var) -> var
##

Ill-formed local variable declaration. At this point, '=' is expected. Instead, the following statement were read:
    $0

touist_smt: LET XOR
##
## Ends in an error in state: 434.
##
## let_affect(expr,formula_smt) -> LET . comma_list(var) AFFECT comma_list(expr) COLON formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET
##
touist_simple: LET XOR
##
## Ends in an error in state: 16.
##
## let_affect(expr,formula_simple) -> LET . comma_list(var) AFFECT comma_list(expr) COLON formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET
##
touist_qbf: LET XOR
##
## Ends in an error in state: 295.
##
## let_affect(expr,formula_qbf) -> LET . comma_list(var) AFFECT comma_list(expr) COLON formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET
##
touist_modalLogic: LET XOR
##
## Ends in an error in state: 210.
##
## let_affect(expr,formula_modalLogic) -> LET . comma_list(var) AFFECT comma_list(expr) COLON formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LET
##

Ill-formed local variable declaration. At this point, a variable is expected. Instead, the following statement were read:
    $0

touist_smt: LPAREN TOP TUPLE
##
## Ends in an error in state: 493.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR SUB RPAREN OR NOTEQUAL NEWLINE MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## expr_smt -> LPAREN expr_smt . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## formula_smt -> expr_smt . [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
##
## The known suffix of the stack is as follows:
## LPAREN expr_smt
##

Ill-formed formula. At this point, finish the formula with ')' or continue it with and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_smt: TOP AND XOR
##
## Ends in an error in state: 476.
##
## formula_smt -> formula_smt AND . formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt AND
##
touist_smt: TOP EQUIV XOR
##
## Ends in an error in state: 481.
##
## formula_smt -> formula_smt EQUIV . formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt EQUIV
##
touist_smt: TOP IMPLIES XOR
##
## Ends in an error in state: 479.
##
## formula_smt -> formula_smt IMPLIES . formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt IMPLIES
##
touist_smt: TOP OR XOR
##
## Ends in an error in state: 474.
##
## formula_smt -> formula_smt OR . formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt OR
##
touist_smt: TOP XOR XOR
##
## Ends in an error in state: 471.
##
## formula_smt -> formula_smt XOR . formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt XOR
##

Ill-formed $1. At this point, a formula is expected. Instead, the following statement were read:
    $0

touist_smt: VAR OR LPAREN NOT BOTTOM RPAREN WHEN
##
## Ends in an error in state: 475.
##
## formula_smt -> formula_smt . AND formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt OR formula_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt OR formula_smt
##
touist_smt: VAR AND LPAREN NOT BOTTOM RPAREN WHEN
##
## Ends in an error in state: 477.
##
## formula_smt -> formula_smt . AND formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt AND formula_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt AND formula_smt
##
touist_smt: VAR IMPLIES LPAREN NOT BOTTOM RPAREN WHEN
##
## Ends in an error in state: 480.
##
## formula_smt -> formula_smt . AND formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt IMPLIES formula_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt IMPLIES formula_smt
##
touist_smt: VAR EQUIV LPAREN NOT BOTTOM RPAREN WHEN
##
## Ends in an error in state: 482.
##
## formula_smt -> formula_smt . AND formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt EQUIV formula_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt EQUIV formula_smt
##

Ill-formed $2. At this point, a continuation of the formula is expected with and,or,=>,... Instead, the following statement were read:
    $0

touist_smt: SUB XOR
##
## Ends in an error in state: 401.
##
## expr_smt -> SUB . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB
##
touist_smt: VAR MUL XOR
##
## Ends in an error in state: 411.
##
## expr_smt -> expr_smt MUL . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt MUL
##
touist_smt: VAR DIV XOR
##
## Ends in an error in state: 413.
##
## expr_smt -> expr_smt DIV . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt DIV
##
touist_smt: VAR ADD XOR
##
## Ends in an error in state: 418.
##
## expr_smt -> expr_smt ADD . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt ADD
##
touist_smt: VAR SUB XOR
##
## Ends in an error in state: 409.
##
## expr_smt -> expr_smt SUB . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt SUB
##

Ill-formed $1. At this point, an expression is expected. Instead, the following statement were read:
    $0

touist_smt: VAR SUB VAR WHEN
##
## Ends in an error in state: 410.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt SUB expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt SUB expr_smt
##
touist_smt: VAR ADD VAR WHEN
##
## Ends in an error in state: 419.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt ADD expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt ADD expr_smt
##

Ill-formed SMT expression. At this point, either begin a new expression or continue the existing one with an operator (+,-,*,/). Instead, the following statement were read:
    $0

touist_smt: VAR NOTEQUAL VAR WHEN
##
## Ends in an error in state: 417.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt NOTEQUAL expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt NOTEQUAL expr_smt
##
touist_smt: VAR LT VAR WHEN
##
## Ends in an error in state: 421.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt LT expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt LT expr_smt
##
touist_smt: VAR LE VAR WHEN
##
## Ends in an error in state: 423.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt LE expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt LE expr_smt
##
touist_smt: VAR GT VAR WHEN
##
## Ends in an error in state: 425.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt GT expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt GT expr_smt
##
touist_smt: VAR GE VAR WHEN
##
## Ends in an error in state: 427.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt GE expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt GE expr_smt
##
touist_smt: VAR EQUAL VAR WHEN
##
## Ends in an error in state: 429.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt EQUAL expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt EQUAL expr_smt
##
touist_smt: SUB VAR WHEN
##
## Ends in an error in state: 430.
##
## expr_smt -> expr_smt . LT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . LE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GT expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . GE expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . ADD expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . SUB expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> SUB expr_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . MUL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . DIV expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . EQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr_smt -> expr_smt . NOTEQUAL expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB expr_smt
##

Ill-formed SMT formula. At this point, either begin a new formula or continue the existing one with an operator (and,or,xor,=>,<=>,!=,==,>,<). Instead, the following statement were read:
    $0

touist_smt: VAR NOTEQUAL XOR
##
## Ends in an error in state: 416.
##
## expr_smt -> expr_smt NOTEQUAL . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt NOTEQUAL
##
touist_smt: VAR LE XOR
##
## Ends in an error in state: 422.
##
## expr_smt -> expr_smt LE . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt LE
##
touist_smt: VAR GT XOR
##
## Ends in an error in state: 424.
##
## expr_smt -> expr_smt GT . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt GT
##
touist_smt: VAR GE XOR
##
## Ends in an error in state: 426.
##
## expr_smt -> expr_smt GE . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt GE
##
touist_smt: VAR EQUAL XOR
##
## Ends in an error in state: 428.
##
## expr_smt -> expr_smt EQUAL . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt EQUAL
##
touist_smt: VAR LT XOR
##
## Ends in an error in state: 420.
##
## expr_smt -> expr_smt LT . expr_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr_smt LT
##

Ill-formed $1. At this point, a SMT expression is expected. Instead, the following statement were read:
    $0

touist_smt: XOR
##
## Ends in an error in state: 399.
##
## touist_smt' -> . touist_smt [ # ]
##
## The known suffix of the stack is as follows:
##
##

Either formula is empty or this SMT formula does not start correctly.

touist_simple: XOR
##
## Ends in an error in state: 388.
##
## touist_simple' -> . touist_simple [ # ]
##
## The known suffix of the stack is as follows:
##
##

Either formula is empty or this SAT formula does not start correctly.

touist_qbf: XOR
##
## Ends in an error in state: 290.
##
## touist_qbf' -> . touist_qbf [ # ]
##
## The known suffix of the stack is as follows:
##
##

Either formula is empty or this QBF formula does not start correctly.

touist_simple: BIGOR VAR COMMA XOR
##
## Ends in an error in state: 18.
##
## comma_list(var) -> var COMMA . comma_list(var) [ IN AFFECT ]
##
## The known suffix of the stack is as follows:
## var COMMA
##

Ill-formed list of variables. At this point, a variable is expected. Instead, the following statement were read:
    $0

touist_simple: LPAREN TOP WHEN
##
## Ends in an error in state: 178.
##
## formula_simple -> LPAREN formula_simple . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . AND formula_simple [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
##
## The known suffix of the stack is as follows:
## LPAREN formula_simple
##
touist_smt: LPAREN NOT BOTTOM VARTUPLE
##
## Ends in an error in state: 491.
##
## formula_smt -> LPAREN formula_smt . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . AND formula_smt [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
##
## The known suffix of the stack is as follows:
## LPAREN formula_smt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 473, spurious reduction of production formula_smt -> expr_smt
## In state 495, spurious reduction of production formula_smt -> NOT formula_smt
##
touist_qbf: LPAREN VAR WHEN
##
## Ends in an error in state: 374.
##
## formula_qbf -> LPAREN formula_qbf . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
##
## The known suffix of the stack is as follows:
## LPAREN formula_qbf
##
touist_modalLogic: LPAREN TERM WHEN
##
## Ends in an error in state: 275.
##
## formula_modalLogic -> LPAREN formula_modalLogic . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
##
## The known suffix of the stack is as follows:
## LPAREN formula_modalLogic
##

Ill-formed formula. At this point, either finish it with ')' or continue it with and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_qbf: VAR AND VAR WHEN
##
## Ends in an error in state: 358.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf AND formula_qbf . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf AND formula_qbf
##
touist_qbf: VAR OR VAR WHEN
##
## Ends in an error in state: 356.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf OR formula_qbf . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf OR formula_qbf
##
touist_qbf: VAR EQUIV VAR WHEN
##
## Ends in an error in state: 363.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf EQUIV formula_qbf . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf EQUIV formula_qbf
##
touist_qbf: VAR IMPLIES VAR WHEN
##
## Ends in an error in state: 361.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf IMPLIES formula_qbf . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf IMPLIES formula_qbf
##

Ill-formed $2. At this point, a continuation of the formula is expected, using either and,or,xor,=>,<=>. Instead, the following statement were read:
    $0

touist_simple: TOP AND XOR
##
## Ends in an error in state: 163.
##
## formula_simple -> formula_simple AND . formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple AND
##
touist_simple: TOP EQUIV XOR
##
## Ends in an error in state: 168.
##
## formula_simple -> formula_simple EQUIV . formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple EQUIV
##
touist_simple: TOP IMPLIES XOR
##
## Ends in an error in state: 166.
##
## formula_simple -> formula_simple IMPLIES . formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple IMPLIES
##
touist_simple: TOP OR XOR
##
## Ends in an error in state: 161.
##
## formula_simple -> formula_simple OR . formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple OR
##
touist_simple: TOP XOR XOR
##
## Ends in an error in state: 159.
##
## formula_simple -> formula_simple XOR . formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple XOR
##
touist_qbf: VAR XOR XOR
##
## Ends in an error in state: 353.
##
## formula_qbf -> formula_qbf XOR . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf XOR
##
touist_qbf: VAR OR XOR
##
## Ends in an error in state: 355.
##
## formula_qbf -> formula_qbf OR . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf OR
##
touist_qbf: VAR AND XOR
##
## Ends in an error in state: 357.
##
## formula_qbf -> formula_qbf AND . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf AND
##
touist_qbf: VAR EQUIV XOR
##
## Ends in an error in state: 362.
##
## formula_qbf -> formula_qbf EQUIV . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf EQUIV
##
touist_qbf: VAR IMPLIES XOR
##
## Ends in an error in state: 360.
##
## formula_qbf -> formula_qbf IMPLIES . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf IMPLIES
##

Ill-formed $2. At this point, a formula is expected. Instead, the following statement were read:
    $0

touist_simple: VAR OR VAR UNION_PR
##
## Ends in an error in state: 162.
##
## formula_simple -> formula_simple . AND formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple OR formula_simple . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple OR formula_simple
##
touist_simple: VAR AND VAR UNION_PR
##
## Ends in an error in state: 164.
##
## formula_simple -> formula_simple . AND formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple AND formula_simple . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple AND formula_simple
##
touist_simple: VAR EQUIV VAR UNION_PR
##
## Ends in an error in state: 169.
##
## formula_simple -> formula_simple . AND formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple EQUIV formula_simple . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple EQUIV formula_simple
##
touist_simple: VAR IMPLIES VAR UNION_PR
##
## Ends in an error in state: 167.
##
## formula_simple -> formula_simple . AND formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple IMPLIES formula_simple . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple IMPLIES formula_simple
##

Ill-formed $2. At this point, a continuation of the formula is expected with and,or,=>,... Instead, the following statement were read:
    $0

touist_simple: NEWLINE VAR UNION_PR
##
## Ends in an error in state: 180.
##
## formula_simple -> formula_simple . AND formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> NEWLINE formula_simple . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NEWLINE formula_simple
##
touist_simple: TOP WHEN
##
## Ends in an error in state: 395.
##
## affect_or(formula_simple) -> formula_simple . option(DATA) [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## formula_simple -> formula_simple . AND formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . OR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . XOR formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . IMPLIES formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . EQUIV formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_simple -> formula_simple . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_simple
##

Ill-formed propositional formula. At this point, either:
- continue the formula with an operator (and,or,xor,=>,<=>),
- or begin a new formula by a blank space,
- or affect a global variable.
Instead, the following statement were read:
    $0

touist_smt: TOP RPAREN
##
## Ends in an error in state: 502.
##
## affect_or(formula_smt) -> formula_smt . option(DATA) [ VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## formula_smt -> formula_smt . AND formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_smt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 473, spurious reduction of production formula_smt -> expr_smt
##
touist_smt: NEWLINE LPAREN BOTTOM NEWLINE RPAREN WHEN
##
## Ends in an error in state: 494.
##
## formula_smt -> formula_smt . AND formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . OR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . XOR formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . IMPLIES formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . EQUIV formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> NEWLINE formula_smt . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_smt -> formula_smt . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NEWLINE formula_smt
##

Ill-formed SMT formula. At this point, either:
- continue the formula with an operator (and,or,xor,=>,<=>),
- or begin a new formula by a blank space,
- or affect a global variable.
Instead, the following statement were read:
    $0

touist_qbf: TOP WHEN
##
## Ends in an error in state: 384.
##
## affect_or(formula_qbf) -> formula_qbf . option(DATA) [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_qbf
##
touist_qbf: NEWLINE VAR WHEN
##
## Ends in an error in state: 376.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> NEWLINE formula_qbf . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NEWLINE formula_qbf
##

Ill-formed QBF formula. At this point, either:
- continue the formula with an operator (and,or,xor,=>,<=>),
- or begin a new formula by a blank space,
- or affect a global variable.
Instead, the following statement were read:
    $0

touist_qbf: NEWLINE XOR
##
## Ends in an error in state: 293.
##
## formula_qbf -> NEWLINE . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

A QBF formula is expected after '\\'. $0 does not seem to be a formula.

touist_simple: NEWLINE XOR
##
## Ends in an error in state: 14.
##
## formula_simple -> NEWLINE . formula_simple [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

A SAT formula is expected after '\\'. $0 does not seem to be a formula.

touist_smt: NEWLINE XOR
##
## Ends in an error in state: 432.
##
## formula_smt -> NEWLINE . formula_smt [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

A SMT formula is expected after '\\'. $0 does not seem to be a formula.

touist_modalLogic: NEWLINE XOR
##
## Ends in an error in state: 208.
##
## formula_modalLogic -> NEWLINE . formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

A modal logic formula is expected after '\\'. $0 does not seem to be a formula.

touist_simple: VAR DATA AND
##
## Ends in an error in state: 397.
##
## nonempty_list(affect_or(formula_simple)) -> affect_or(formula_simple) . [ EOF ]
## nonempty_list(affect_or(formula_simple)) -> affect_or(formula_simple) . nonempty_list(affect_or(formula_simple)) [ EOF ]
##
## The known suffix of the stack is as follows:
## affect_or(formula_simple)
##
touist_smt: VAR DATA AND
##
## Ends in an error in state: 504.
##
## nonempty_list(affect_or(formula_smt)) -> affect_or(formula_smt) . [ EOF ]
## nonempty_list(affect_or(formula_smt)) -> affect_or(formula_smt) . nonempty_list(affect_or(formula_smt)) [ EOF ]
##
## The known suffix of the stack is as follows:
## affect_or(formula_smt)
##
touist_qbf: VAR DATA XOR
##
## Ends in an error in state: 386.
##
## nonempty_list(affect_or(formula_qbf)) -> affect_or(formula_qbf) . [ EOF ]
## nonempty_list(affect_or(formula_qbf)) -> affect_or(formula_qbf) . nonempty_list(affect_or(formula_qbf)) [ EOF ]
##
## The known suffix of the stack is as follows:
## affect_or(formula_qbf)
##
touist_modalLogic: VAR DATA XOR
##
## Ends in an error in state: 288.
##
## nonempty_list(affect_or(formula_modalLogic)) -> affect_or(formula_modalLogic) . [ EOF ]
## nonempty_list(affect_or(formula_modalLogic)) -> affect_or(formula_modalLogic) . nonempty_list(affect_or(formula_modalLogic)) [ EOF ]
##
## The known suffix of the stack is as follows:
## affect_or(formula_modalLogic)
##

After 'data', you are expected to affect global variable.

touist_simple: VARTUPLE LBRACK VAR RANGE VAR WHEN
##
## Ends in an error in state: 102.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> LBRACK expr RANGE expr . RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK expr RANGE expr
##

Ill-formed range-based set declaration. At this point, either finish the expression with ']' or continue it with an operator (<,>,!=,==,and,or...). Instead, the following statement were read:
    $0

touist_simple: VARTUPLE LBRACK VAR RANGE XOR
##
## Ends in an error in state: 101.
##
## expr -> LBRACK expr RANGE . expr RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK expr RANGE
##

Ill-formed range-based set declaration. At this point, an expression is expected (int or float). Instead, the following statement were read:
    $0

touist_simple: VARTUPLE LBRACK VAR WHEN
##
## Ends in an error in state: 115.
##
## expr -> LBRACK comma_list(expr) . RBRACK [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK comma_list(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 100, spurious reduction of production comma_list(expr) -> expr
##

Ill-formed set declaration. At this point, either continue the list of expressions or finish it with ']'. Instead, the following statement were read:
    $0

touist_simple: VARTUPLE TOFLOAT VAR WHEN
##
## Ends in an error in state: 191.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> TOFLOAT expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## TOFLOAT expr
##
touist_simple: VARTUPLE TOINT VAR WHEN
##
## Ends in an error in state: 193.
##
## expr -> TOINT expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## TOINT expr
##
touist_smt: ATLEAST VAR WHEN
##
## Ends in an error in state: 465.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_smt -> ATLEAST expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr
##
touist_smt: ATMOST VAR WHEN
##
## Ends in an error in state: 460.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_smt -> ATMOST expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr
##
touist_smt: EXACT VAR WHEN
##
## Ends in an error in state: 443.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_smt -> EXACT expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr
##
touist_smt: IF VAR WHEN
##
## Ends in an error in state: 440.
##
## expr -> expr . ADD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION THEN SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## formula_smt -> IF expr . THEN formula_smt ELSE formula_smt END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## IF expr
##
touist_simple: ATLEAST VAR WHEN
##
## Ends in an error in state: 151.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_simple -> ATLEAST expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr
##
touist_simple: ATMOST VAR WHEN
##
## Ends in an error in state: 146.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_simple -> ATMOST expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr
##
touist_simple: BIGOR VAR IN VAR WHEN VAR WHEN
##
## Ends in an error in state: 112.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RBRACK OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## option(when_cond) -> WHEN expr . [ RBRACK COLON ]
##
## The known suffix of the stack is as follows:
## WHEN expr
##
touist_simple: EXACT VAR WHEN
##
## Ends in an error in state: 128.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_simple -> EXACT expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN QUOTE OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr
##
touist_qbf: EXACT VAR WHEN
##
## Ends in an error in state: 322.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_qbf -> EXACT expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr
##
touist_qbf: ATLEAST VAR WHEN
##
## Ends in an error in state: 345.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_qbf -> ATLEAST expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr
##
touist_qbf: ATMOST VAR WHEN
##
## Ends in an error in state: 340.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_qbf -> ATMOST expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr
##
touist_modalLogic: ATLEAST TERM UNION_PR
##
## Ends in an error in state: 244.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_modalLogic -> ATLEAST expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATLEAST expr
##
touist_modalLogic: ATMOST TERM UNION_PR
##
## Ends in an error in state: 239.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_modalLogic -> ATMOST expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## ATMOST expr
##
touist_modalLogic: EXACT TERM UNION_PR
##
## Ends in an error in state: 219.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## formula_modalLogic -> EXACT expr . COMMA expr RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXACT expr
##

Ill-formed $2. At this point, either finish the integer expression using ',' or continue it using an operator.

touist_simple: VARTUPLE EMPTY VAR WHEN
##
## Ends in an error in state: 88.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> EMPTY expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## EMPTY expr
##
touist_simple: VARTUPLE POWERSET VAR WHEN
##
## Ends in an error in state: 120.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> POWERSET expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## POWERSET expr
##
touist_simple: VARTUPLE CARD VAR WHEN
##
## Ends in an error in state: 82.
##
## expr -> CARD expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## CARD expr
##

Ill-formed $2. At this point, either finish the set expression with ')' or continue it using an operator (and,or,>,<,!=,==...). Instead, the following statement were read:
    $0

touist_simple: VARTUPLE SQRT VAR WHEN
##
## Ends in an error in state: 184.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> SQRT expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## SQRT expr
##
touist_simple: VARTUPLE ABS VAR WHEN
##
## Ends in an error in state: 38.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> ABS expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## ABS expr
##

Ill-formed $2. At this point, a continuation of the expression is expected with an operator (<,>,!=,==,and,or...). Instead, the following statement were read:
    $0

touist_simple: VARTUPLE VAR ADD XOR
##
## Ends in an error in state: 51.
##
## expr -> expr ADD . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD
##
touist_simple: VARTUPLE VAR AND XOR
##
## Ends in an error in state: 71.
##
## expr -> expr AND . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND
##
touist_simple: VARTUPLE VAR DIV XOR
##
## Ends in an error in state: 47.
##
## expr -> expr DIV . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV
##
touist_simple: VARTUPLE VAR EQUAL XOR
##
## Ends in an error in state: 63.
##
## expr -> expr EQUAL . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQUAL
##
touist_simple: VARTUPLE VAR EQUIV XOR
##
## Ends in an error in state: 75.
##
## expr -> expr EQUIV . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQUIV
##
touist_simple: VARTUPLE VAR GE XOR
##
## Ends in an error in state: 61.
##
## expr -> expr GE . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GE
##
touist_simple: VARTUPLE VAR GT XOR
##
## Ends in an error in state: 59.
##
## expr -> expr GT . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT
##
touist_simple: VARTUPLE VAR IMPLIES XOR
##
## Ends in an error in state: 73.
##
## expr -> expr IMPLIES . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr IMPLIES
##
touist_simple: VARTUPLE VAR IN XOR
##
## Ends in an error in state: 57.
##
## expr -> expr IN . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr IN
##
touist_simple: VARTUPLE VAR LE XOR
##
## Ends in an error in state: 55.
##
## expr -> expr LE . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LE
##
touist_simple: VARTUPLE VAR LT XOR
##
## Ends in an error in state: 53.
##
## expr -> expr LT . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT
##
touist_simple: VARTUPLE VAR MOD XOR
##
## Ends in an error in state: 45.
##
## expr -> expr MOD . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD
##
touist_simple: VARTUPLE VAR MUL XOR
##
## Ends in an error in state: 43.
##
## expr -> expr MUL . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MUL
##
touist_simple: VARTUPLE VAR NOTEQUAL XOR
##
## Ends in an error in state: 49.
##
## expr -> expr NOTEQUAL . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NOTEQUAL
##
touist_simple: VARTUPLE VAR OR XOR
##
## Ends in an error in state: 69.
##
## expr -> expr OR . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR
##
touist_simple: VARTUPLE VAR SUB XOR
##
## Ends in an error in state: 41.
##
## expr -> expr SUB . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB
##
touist_simple: VARTUPLE VAR XOR XOR
##
## Ends in an error in state: 39.
##
## expr -> expr XOR . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr XOR
##
touist_simple: VARTUPLE LBRACK VAR COMMA XOR
##
## Ends in an error in state: 108.
##
## comma_list(expr) -> expr COMMA . comma_list(expr) [ WHEN RBRACK COLON ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed list of expressions. At this point, an expression is expected. Instead, the following statement were read:
    $0

touist_qbf: VARTUPLE VAR XOR VAR UNION_PR
##
## Ends in an error in state: 40.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr XOR expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr XOR expr
##
touist_qbf: VARTUPLE VAR SUB VAR UNION_PR
##
## Ends in an error in state: 42.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr SUB expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB expr
##
touist_qbf: VARTUPLE VAR INTER VAR UNION_PR
##
## Ends in an error in state: 79.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr INTER expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr INTER expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

touist_qbf: VARTUPLE VAR SUBSET VAR UNION_PR
##
## Ends in an error in state: 68.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr SUBSET expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUBSET expr
##
touist_qbf: VARTUPLE VAR UNION VAR UNION_PR
##
## Ends in an error in state: 66.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr UNION expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr UNION expr
##
touist_qbf: VARTUPLE VAR ADD VAR UNION_PR
##
## Ends in an error in state: 52.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr ADD expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD expr
##
touist_qbf: VARTUPLE VAR AND VAR UNION_PR
##
## Ends in an error in state: 72.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr AND expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##
touist_qbf: VARTUPLE VAR OR VAR UNION_PR
##
## Ends in an error in state: 70.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr OR expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##
touist_qbf: VARTUPLE VAR EQUIV VAR UNION_PR
##
## Ends in an error in state: 76.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr EQUIV expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQUIV expr
##
touist_qbf: VARTUPLE VAR GE VAR UNION_PR
##
## Ends in an error in state: 62.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr GE expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GE expr
##
touist_qbf: VARTUPLE VAR DIFF VAR UNION_PR
##
## Ends in an error in state: 81.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr DIFF expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIFF expr
##
touist_qbf: VARTUPLE VAR DIV VAR UNION_PR
##
## Ends in an error in state: 48.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr DIV expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##
touist_qbf: VARTUPLE VAR EQUAL VAR UNION_PR
##
## Ends in an error in state: 64.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr EQUAL expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQUAL expr
##
touist_qbf: VARTUPLE VAR GT VAR UNION_PR
##
## Ends in an error in state: 60.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr GT expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##
touist_qbf: VARTUPLE VAR IMPLIES VAR UNION_PR
##
## Ends in an error in state: 74.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr IMPLIES expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr IMPLIES expr
##
touist_qbf: VARTUPLE VAR IN VAR UNION_PR
##
## Ends in an error in state: 58.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr IN expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr IN expr
##
touist_qbf: VARTUPLE VAR LE VAR UNION_PR
##
## Ends in an error in state: 56.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr LE expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LE expr
##
touist_qbf: VARTUPLE VAR LT VAR UNION_PR
##
## Ends in an error in state: 54.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr LT expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##
touist_qbf: VARTUPLE VAR MUL VAR UNION_PR
##
## Ends in an error in state: 44.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr MUL expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MUL expr
##
touist_qbf: VARTUPLE VAR NOTEQUAL VAR UNION_PR
##
## Ends in an error in state: 50.
##
## expr -> expr . ADD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUB expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MUL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . MOD expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . AND expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . OR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . XOR expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IMPLIES expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUIV expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . EQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr NOTEQUAL expr . [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . LE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GT expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . GE expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . SUBSET expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . UNION expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . INTER expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . DIFF expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NOTEQUAL expr
##

Ill-formed expression. At this point, a continuation of the expression is expected. Instead, got $0.

touist_qbf: VARTUPLE VAR UNION XOR
##
## Ends in an error in state: 65.
##
## expr -> expr UNION . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr UNION
##
touist_qbf: VARTUPLE VAR SUBSET XOR
##
## Ends in an error in state: 67.
##
## expr -> expr SUBSET . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUBSET
##
touist_qbf: VARTUPLE VAR DIFF XOR
##
## Ends in an error in state: 80.
##
## expr -> expr DIFF . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIFF
##
touist_qbf: VARTUPLE VAR INTER XOR
##
## Ends in an error in state: 78.
##
## expr -> expr INTER . expr [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## expr INTER
##

Ill-formed $1. At this point, an expression is expected. Instead, got $0.

touist_simple: VARTUPLE VAR COMMA XOR
##
## Ends in an error in state: 196.
##
## comma_list(indices) -> expr COMMA . comma_list(indices) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed list indices. At this point, an expression is expected (an 'index' is an expression). Instead, the following statement were read:
    $0

touist_simple: VARTUPLE VAR WHEN
##
## Ends in an error in state: 204.
##
## var -> VARTUPLE comma_list(indices) . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE QUOTE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND DATA COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND AFFECT ADD ]
##
## The known suffix of the stack is as follows:
## VARTUPLE comma_list(indices)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 195, spurious reduction of production comma_list(indices) -> expr
##

Ill-formed variable-tuple. At this point, either continue the list of indices (= expressions) using ',' or finish the variable-tuple using ')'. Instead, the following statement were read:
    $0

touist_simple: TUPLE VAR WHEN
##
## Ends in an error in state: 198.
##
## prop -> TUPLE comma_list(indices) . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE QUOTE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND DATA COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## TUPLE comma_list(indices)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 195, spurious reduction of production comma_list(indices) -> expr
##

Ill-formed proposition-tuple. At this point, either continue the list of indices (= expressions) using ',' or finish the proposition-tuple using ')'. Instead, the following statement were read: $0

touist_qbf: VARTUPLE UNION_PR VAR COMMA VAR WHEN
##
## Ends in an error in state: 202.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> UNION_PR expr COMMA expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## UNION_PR expr COMMA expr
##
touist_qbf: VARTUPLE INTER_PR VAR COMMA VAR WHEN
##
## Ends in an error in state: 98.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> INTER_PR expr COMMA expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## INTER_PR expr COMMA expr
##
touist_qbf: VARTUPLE DIFF_PR VAR COMMA VAR WHEN
##
## Ends in an error in state: 86.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> DIFF_PR expr COMMA expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## DIFF_PR expr COMMA expr
##

Ill-formed $4. At this point, either finish the expression with ')' or continue it using an operator on expressions. Instead, read $0.

touist_qbf: VARTUPLE DIFF_PR VAR COMMA XOR
##
## Ends in an error in state: 85.
##
## expr -> DIFF_PR expr COMMA . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## DIFF_PR expr COMMA
##
touist_qbf: VARTUPLE INTER_PR VAR COMMA XOR
##
## Ends in an error in state: 97.
##
## expr -> INTER_PR expr COMMA . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## INTER_PR expr COMMA
##
touist_qbf: VARTUPLE SUBSET_PR VAR COMMA XOR
##
## Ends in an error in state: 188.
##
## expr -> SUBSET_PR expr COMMA . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## SUBSET_PR expr COMMA
##
touist_qbf: VARTUPLE UNION_PR VAR COMMA XOR
##
## Ends in an error in state: 201.
##
## expr -> UNION_PR expr COMMA . expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## UNION_PR expr COMMA
##

Ill-formed $2. After the comma, an expression (a set) is expected.

touist_qbf: VARTUPLE SUBSET_PR VAR COMMA VAR WHEN
##
## Ends in an error in state: 189.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> SUBSET_PR expr COMMA expr . RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB RPAREN OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF AND ADD ]
##
## The known suffix of the stack is as follows:
## SUBSET_PR expr COMMA expr
##

Ill-formed $4. At this point, either finish the set-expression by ',' or continue it using one of the expression operators.

touist_qbf: VARTUPLE INTER_PR VAR WHEN
##
## Ends in an error in state: 96.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> INTER_PR expr . COMMA expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## INTER_PR expr
##
touist_qbf: VARTUPLE DIFF_PR VAR WHEN
##
## Ends in an error in state: 84.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> DIFF_PR expr . COMMA expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## DIFF_PR expr
##
touist_qbf: VARTUPLE SUBSET_PR VAR WHEN
##
## Ends in an error in state: 187.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> SUBSET_PR expr . COMMA expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## SUBSET_PR expr
##
touist_qbf: VARTUPLE UNION_PR VAR WHEN
##
## Ends in an error in state: 200.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COMMA AND ADD ]
## expr -> UNION_PR expr . COMMA expr RPAREN [ XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DIAMOND COMMA COLON BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## UNION_PR expr
##

Ill-formed $2. At this point, either finish the set-expression by ',' or continue it using one of the expression operators.

touist_qbf: FORALL VAR COLON VAR WHEN
##
## Ends in an error in state: 368.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> FORALL comma_list(prop_or_var) option(for_statement) COLON formula_qbf . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## FORALL comma_list(prop_or_var) option(for_statement) COLON formula_qbf
##

Ill-formed universal quantifier. At this point, either continue the QBF formula or begin a new QBF formula (with a new line or a whitespace). Instead, the following statement were read:
    $0

touist_qbf: FORALL VAR COLON XOR
##
## Ends in an error in state: 316.
##
## formula_qbf -> FORALL comma_list(prop_or_var) option(for_statement) COLON . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## FORALL comma_list(prop_or_var) option(for_statement) COLON
##

Ill-formed universal quantifier. After $1, a QBF formula is expected. Instead, the following statement were read:
    $0

touist_qbf: FORALL XOR
##
## Ends in an error in state: 303.
##
## formula_qbf -> FORALL . comma_list(prop_or_var) option(for_statement) COLON formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## FORALL
##

Ill-formed universal quantifier. After $1, a comma-separated list of propositions or variables is expected. Instead, the following statement were read:
    $0

touist_qbf: EXISTS VAR COLON VAR WHEN
##
## Ends in an error in state: 367.
##
## formula_qbf -> formula_qbf . AND formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . OR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . XOR formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . IMPLIES formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . EQUIV formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> formula_qbf . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_qbf -> EXISTS comma_list(prop_or_var) option(for_statement) COLON formula_qbf . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXISTS comma_list(prop_or_var) option(for_statement) COLON formula_qbf
##

Ill-formed existential quantifier. At this point, either continue the QBF formula or begin a new QBF formula (with a new line or a whitespace). Instead, the following statement were read:
    $0

touist_qbf: EXISTS VAR COLON XOR
##
## Ends in an error in state: 320.
##
## formula_qbf -> EXISTS comma_list(prop_or_var) option(for_statement) COLON . formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXISTS comma_list(prop_or_var) option(for_statement) COLON
##

Ill-formed existential quantifier. After $1, a QBF formula is expected. Instead, the following statement were read:
    $0

touist_qbf: EXISTS XOR
##
## Ends in an error in state: 317.
##
## formula_qbf -> EXISTS . comma_list(prop_or_var) option(for_statement) COLON formula_qbf [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## EXISTS
##

Ill-formed existential quantifier. After $1, a comma-separated list of propositions or variables is expected. Instead, the following statement were read:
    $0

touist_qbf: FORALL VAR FOR XOR
##
## Ends in an error in state: 311.
##
## option(for_statement) -> FOR . var IN expr [ COLON ]
##
## The known suffix of the stack is as follows:
## FOR
##

Ill-formed 'for' statement. At this point, a variable is expected.

touist_qbf: FORALL VAR FOR VAR XOR
##
## Ends in an error in state: 312.
##
## option(for_statement) -> FOR var . IN expr [ COLON ]
##
## The known suffix of the stack is as follows:
## FOR var
##

Ill-formed 'for' statement. After the variable $1, 'in' is expected.

touist_qbf: FORALL VAR FOR VAR IN XOR
##
## Ends in an error in state: 313.
##
## option(for_statement) -> FOR var IN . expr [ COLON ]
##
## The known suffix of the stack is as follows:
## FOR var IN
##

Ill-formed 'for' statement. After 'in', a set is expected.

touist_qbf: FORALL VAR FOR VAR IN VAR WHEN
##
## Ends in an error in state: 314.
##
## expr -> expr . ADD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . SUB expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . MUL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . DIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . MOD expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . AND expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . OR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . XOR expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . IMPLIES expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . EQUIV expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . EQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . NOTEQUAL expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . LT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . LE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . GT expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . GE expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . SUBSET expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . IN expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . UNION expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . INTER expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## expr -> expr . DIFF expr [ XOR UNION SUBSET SUB OR NOTEQUAL MUL MOD LT LE INTER IN IMPLIES GT GE EQUIV EQUAL DIV DIFF COLON AND ADD ]
## option(for_statement) -> FOR var IN expr . [ COLON ]
##
## The known suffix of the stack is as follows:
## FOR var IN expr
##

Ill-formed 'for' statement. At this point, a ':' is expected.

touist_qbf: FORALL TERM COMMA XOR
##
## Ends in an error in state: 307.
##
## comma_list(prop_or_var) -> prop COMMA . comma_list(prop_or_var) [ FOR COLON ]
##
## The known suffix of the stack is as follows:
## prop COMMA
##
touist_qbf: FORALL VAR COMMA XOR
##
## Ends in an error in state: 305.
##
## comma_list(prop_or_var) -> var COMMA . comma_list(prop_or_var) [ FOR COLON ]
##
## The known suffix of the stack is as follows:
## var COMMA
##

Ill-formed proposition/variable list. After $1, a variable or proposition is expected. Instead, the following statement were read:
    $0

touist_qbf: FORALL TERM XOR
##
## Ends in an error in state: 306.
##
## comma_list(prop_or_var) -> prop . [ FOR COLON ]
## comma_list(prop_or_var) -> prop . COMMA comma_list(prop_or_var) [ FOR COLON ]
##
## The known suffix of the stack is as follows:
## prop
##
touist_qbf: FORALL VAR XOR
##
## Ends in an error in state: 304.
##
## comma_list(prop_or_var) -> var . [ FOR COLON ]
## comma_list(prop_or_var) -> var . COMMA comma_list(prop_or_var) [ FOR COLON ]
##
## The known suffix of the stack is as follows:
## var
##

Ill-formed quantifer declaration. After variable $1, either end the list with ':' or continue it with a proposition or variable. Instead, the following statement were read:
    $0

touist_modalLogic: XOR
##
## Ends in an error in state: 0.
##
## touist_modalLogic' -> . touist_modalLogic [ # ]
##
## The known suffix of the stack is as follows:
##
##

Either formula is empty or this modal logic formula does not start correctly.

touist_modalLogic: LPAREN XOR
##
## Ends in an error in state: 209.
##
## formula_modalLogic -> LPAREN . formula_modalLogic RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##
touist_modalLogic: DIAMOND XOR
##
## Ends in an error in state: 223.
##
## formula_modalLogic -> DIAMOND . formula_modalLogic RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## DIAMOND
##
touist_modalLogic: BOX XOR
##
## Ends in an error in state: 224.
##
## formula_modalLogic -> BOX . formula_modalLogic RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BOX
##

Ill-formed $1. At this point a modal logic expression is expected. Instead, the following statement was read:
    $0

touist_modalLogic: VAR AND XOR
##
## Ends in an error in state: 256.
##
## formula_modalLogic -> formula_modalLogic AND . formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic AND
##
touist_modalLogic: VAR OR XOR
##
## Ends in an error in state: 254.
##
## formula_modalLogic -> formula_modalLogic OR . formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic OR
##
touist_modalLogic: VAR EQUIV XOR
##
## Ends in an error in state: 261.
##
## formula_modalLogic -> formula_modalLogic EQUIV . formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic EQUIV
##
touist_modalLogic: VAR IMPLIES XOR
##
## Ends in an error in state: 259.
##
## formula_modalLogic -> formula_modalLogic IMPLIES . formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic IMPLIES
##
touist_modalLogic: VAR XOR XOR
##
## Ends in an error in state: 252.
##
## formula_modalLogic -> formula_modalLogic XOR . formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic XOR
##

Ill-formed $2. At this point, a formula is expected. Instead, the following statement was read:
    $0

touist_modalLogic: VAR AND TERM WHEN
##
## Ends in an error in state: 257.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic AND formula_modalLogic . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic AND formula_modalLogic
##
touist_modalLogic: VAR OR TERM WHEN
##
## Ends in an error in state: 255.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic OR formula_modalLogic . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic OR formula_modalLogic
##
touist_modalLogic: VAR EQUIV TERM WHEN
##
## Ends in an error in state: 262.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic EQUIV formula_modalLogic . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic EQUIV formula_modalLogic
##
touist_modalLogic: VAR IMPLIES TERM WHEN
##
## Ends in an error in state: 260.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic IMPLIES formula_modalLogic . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XORwere VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic IMPLIES formula_modalLogic
##
touist_modalLogic: BOX TERM WHEN
##
## Ends in an error in state: 266.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> BOX formula_modalLogic . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## BOX formula_modalLogic
##
touist_modalLogic: DIAMOND TERM WHEN
##
## Ends in an error in state: 268.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR RPAREN OR NEWLINE IMPLIES EQUIV AND ]
## formula_modalLogic -> DIAMOND formula_modalLogic . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## DIAMOND formula_modalLogic
##

Ill-formed $2. At this point, a continuation of the formula is expected, using either and,or,xor,=>,<=>,... Instead, the following statement was read:
    $0

touist_modalLogic: TERM WHEN
##
## Ends in an error in state: 285.
##
## affect_or(formula_modalLogic) -> formula_modalLogic . option(DATA) [ VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF DIAMOND BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST ]
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## formula_modalLogic
##
touist_modalLogic: NEWLINE TERM WHEN
##
## Ends in an error in state: 277.
##
## formula_modalLogic -> formula_modalLogic . AND formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . OR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . XOR formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . IMPLIES formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . EQUIV formula_modalLogic [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> NEWLINE formula_modalLogic . [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
## formula_modalLogic -> formula_modalLogic . NEWLINE [ XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DIAMOND DATA BOX BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ]
##
## The known suffix of the stack is as follows:
## NEWLINE formula_modalLogic
##

Ill-formed modal logic formula. At this point, either:
- continue the formula with an operator (and,or,xor,=>,<=>),
- or begin a new formula by a blank space,
- or affect a global variable.
Instead, the following statement was read:
    $0
